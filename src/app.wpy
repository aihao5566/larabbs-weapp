<style lang="less">
// 引入weui
@import 'style/weui.less';
page {
  background-color: #f8f8f8;
  font-size: 16px;
}
.page__hd {
  padding: 40px;
}
.page__bd {
  padding-bottom: 40px;
}
.page__bd_spacing {
  padding-left: 15px;
  padding-right: 15px;
}
.page__ft {
  padding-bottom: 10px;
  text-align: center;
}
.page__title {
  text-align: left;
  font-size: 20px;
  font-weight: 400;
}
.page__desc {
  margin-top: 5px;
  color: #888888;
  text-align: left;
  font-size: 14px;
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'
import api from '@/utils/api'

import { setStore } from 'wepy-redux'
import configStore from './store'

const store = configStore()
setStore(store)
// 定义在 app.wpy 中的方法是全局方法，在其他页面中可以通过 this.$parent.checkLogin() 调用上面定义的checkLogin 方法
export default class extends wepy.app {
  config = {
    // 定义页面
    pages: [
      'pages/topics/index',
      'pages/topics/show',
      'pages/topics/userIndex',
      'pages/users/me',
      'pages/users/edit',
      'pages/users/show',
      'pages/auth/login',
      'pages/auth/register',
      'pages/replies/index',
      'pages/replies/userIndex',
      'pages/replies/create'
    ],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: 'WeChat',
      navigationBarTextStyle: 'black'
    },
    tabBar: {
      list: [
        {
          pagePath: 'pages/topics/index',
          text: '首页',
          iconPath: 'images/index.png',
          selectedIconPath: 'images/index_selected.png'
        },
        {
          pagePath: 'pages/users/me',
          text: '我的',
          iconPath: 'images/user.png',
          selectedIconPath: 'images/user_selected.png'
        }
      ],
      color: '#707070',
      selectedColor: '#00b5ad'
    }
  };

  // 全局变量
  globalData = {
    // 需要刷新的页面，可以在页面的 onShow 方法中通过 this.$parent.globalData.refreshPages 获取或设置全局数据。
    refreshPages: []
  }

  // 用来删除文章时,返回后文章还是存在的问题
  checkRefreshPages (route, callback) {
    // 检测传入的页面路由是否在 refreshPages 数组中
    let refreshIndex = this.globalData.refreshPages.indexOf(route)
    if (refreshIndex === -1) {
      return
    }
    // 将路由移除 refreshPages
    this.globalData.refreshPages.splice(refreshIndex, 1)
    callback && callback()
  }

  constructor() {
    super()
    this.use('requestfix')
    // ES6 中的Promise
    this.use('promisify')
  }

  onLaunch () {
    // 原生小程序开发
    //  wx.login({
    //  success: function(res) {
    //  console.log(res)
    //  }
    //  });
    // 获取token
    wepy.login().then(res => {
      console.log('login: ', res)
    })
  }

  // async onLaunch () {
  //   // WePY 中使用 Await
  //   let res = await wepy.login()
  // }

  // 获取当前登录用户信息
  async getCurrentUser () {
    // 如果用户未登录
    if (!this.checkLogin()) {
      return null
    }
    // 从缓存中获取用户信息
    let user = wepy.getStorageSync('user')
    try {
      // 登录了但是缓存中没有，请求接口获取
      if (!user) {
        let userResponse = await api.authRequest('user')
        // 状态码为 200 表示请求成功
        if (userResponse.statusCode === 200) {
          user = userResponse.data
          wepy.setStorageSync('user', user)
        }
      }
    } catch (err) {
      console.log(err)
      wepy.showModal({
        title: '提示',
        content: '服务器错误，请联系管理员'
      })
    }
    return user
  }
  // 用户是否已经登录
  checkLogin () {
    return (wepy.getStorageSync('access_token') !== '')
  }

  sleep (s) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve('promise resolved')
      }, s * 1000)
    })
  }

  async testAsync () {
    const data = await this.sleep(3)
    console.log(data)
  }

  getUserInfo (cb) {
    const that = this
    if (this.globalData.userInfo) {
      return this.globalData.userInfo
    }
    wepy.getUserInfo({
      success (res) {
        that.globalData.userInfo = res.userInfo
        cb && cb(res.userInfo)
      }
    })
  }
}
</script>
